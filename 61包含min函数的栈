import java.util.Stack;

public class Solution {

    private Stack<Integer> stackData;
    private Stack<Integer> stackMin;
    
    public Solution() {
        this.stackData = new Stack<Integer>();
        this.stackMin = new Stack<Integer>();
    }
    
    public void push(int node) {
        if (this.stackMin.isEmpty()) {
            this.stackMin.push(node);
        }else if (node <= this.min()) {
            this.stackMin.push(node);
        }
        this.stackData.push(node);
    }
    
    public void pop() {
        if (this.stackData.isEmpty()) {
            throw new RuntimeException("You stack is empty.");
        }
        int value = this.stackData.pop();
        if (value == this.min()) {
            this.stackMin.pop();
        }
        
    }
    
    public int top() {
         if (this.stackData.isEmpty()) {
            throw new RuntimeException("You stack is empty.");
        }
        return this.stackData.peek();
    }
    
    public int min() {
        if (this.stackMin.isEmpty()) {
            throw new RuntimeException("You stack is empty.");
        }
        return this.stackMin.peek();
    }
}
